using System;
using System.Collections.Generic;
using Server;
using Server.Gumps;
using Server.Network;
using Server.Mobiles;
using Server.Items;

namespace Server.Custom.SpecialVendor
{
    public class TreasureGamblerGump : Gump
    {
        private Mobile m_From;
        private List<Item> itemsList = new List<Item>
        {
            // Your items list...
			new AncientExoskeletalGloves(),
			new PlateGloves(),
			new GlovesOfMethodis(),
			new LeatherGloves(),
			new MonsterGloves(),
			new NoxGloves(),
			new AbysmalGloves(),
			new BoneGloves(),
			new EvilMageGloves(),
			new LeafGloves(),
			new GlovesOfCorruption(),
			new GlovesOfRegeneration(),
			new DragonGloves(),
			new AresGloves(),
			new GlovesOfCommand(),
			new GlovesOfTheGrandmasterThief(),
			new PlantingGloves(),
			new TrapGloves(),
			new CratylusGloves(),
			new ManiacTailorGloves(),
			new DemonLordGloves(),
			new RoboGloves(),
			new ChaosGloves(),
			new HydraGloves(),
			new DragonGlovesOfEvolution(),
			new KageMaruGloves(),
			new VirtueGloves(),
			new GlovesOfTheLeprechaun(),
			new MalabrancheGloves(),
			new DemonPactGloves(),
			new GlovesofMight(),
			new GlovesoftheUnderworld(),
			new GlovesoftheSea(),
			new GlovesMightCrystal(),
			new GlovesoftheHeavens(),
			new TwistedGloves(),
			new NecroloricatusGloves(),
			new OblivionGloves(),
			new SinGloves(),
			new AncientDragonLordGloves(),
			new SkeletalSerpentGloves(),
			new SuicideGloves(),
			new StuddedGloves(),
			new TergusGloves(),
			new VoidKnightGloves(),
			new GreymistGloves(),
			new AssassinGloves(),
			new BestialGloves(),
			new DaemonGloves(),
			new WoodlandGloves(),
			new DarkwoodGloves(),
			new HunterGloves(),
			new InitiationGloves(),
			new KnightsPlateGloves(),
			new HideGloves(),
			new LeafweaveGloves(),
			new MyrmidonGloves(),
			new DeathGloves(),
			new PaladinGloves(),
			new RangerGloves(),
			new ScoutGloves(),
			new SorcererGloves(),
			new VirtuososKidGloves(),
			new RingmailGloves(),
			new GlovesOfFeudalGrip(),
			new GlovesOfSafeguarding(),
			new GlovesOfThePugilist(),
			new RoyalZooLeatherGloves(),
			new RoyalZooPlateGloves(),
			new RoyalZooStuddedGloves(),
			new GlovesOfTheSun(),
			new RumpleCharms(),
			new PlateArms(),
			new AngelArms(),
			new DragonArms(),
			new ArmsOfMethodis(),
			new LeatherArms(),
			new MonsterArms(),
			new NoxArms(),
			new LeafArms(),
			new ArmsOfToxicity(),
			new BoneArms(),
			new Fortifiedarms(),
			new HellForgedArms(),
			new AresArms(),
			new ArmsLoreAugmentCrystal(),
			new ArmSlotChangeDeed(),
			new CratylusArms(),
			new ManiacTailorArms(),
			new DemonLordArms(),
			new RoboArms(),
			new HydraArms(),
			new DragonArmsOfEvolution(),
			new VirtueArms(),
			new ArmsOfTheLeprechaun(),
			new LeatherBustierArms(),
			new MalabrancheArms(),
			new ArmsofMight(),
			new ArmsoftheUnderworld(),
			new ArmsoftheSea(),
			new ArmsoftheHeavens(),
			new TwistedArms(),
			new OblivionArms(),
			new SinArms(),
			new AncientDragonLordArms(),
			new SkeletalSerpentArms(),
			new SuicideArms(),
			new StuddedArms(),
			new TergusArms(),
			new VoidKnightArms(),
			new HangingPlatemailArms(),
			new GreymistArms(),
			new AssassinArms(),
			new GargishLeatherArms(),
			new BestialArms(),
			new DaemonArms(),
			new DragonTurtleHideArms(),
			new WoodlandArms(),
			new HunterArms(),
			new InitiationArms(),
			new KnightsPlateArms(),
			new MyrmidonArms(),
			new DeathArms(),
			new PaladinArms(),
			new RangerArms(),
			new ScoutArms(),
			new StuddedBustierArms(),
			new SorcererArms(),
			new CompassionArms(),
			new GargishPlateArms(),
			new ArmsOfArmstrong(),
			new GargishStoneArms(),
			new RoyalZooLeatherArms(),
			new RoyalZooPlateArms(),
			new RoyalZooStuddedArms(),
			new GargishClothArms(),
			new ArmsOfTacticalExcellence(),
			new ArmsAndWeaponsPrimer(),
			new HarmScroll(),
			new MeteorSwarmScroll(),
			new FemaleGargishLeatherArms(),
			new FemaleGargishPlateArms(),
			new FemaleGargishStoneArms(),
			new GargishClothArmsArmor(),
			new FemaleGargishClothArmsArmor(),
			new RingmailArms(),
			new FemaleGargishClothArms(),
			new MaleGargishClothArms(),
			new PrimerOnArmsTalisman(),
			new FishermansArms(),
			new PlateLegs(),
			new AngelLegs(),
			new LegsOfMethodis(),
			new MonsterLegs(),
			new LeatherLegs(),
			new NoxLegs(),
			new ChainLegs(),
			new LeafLegs(),
			new AresLegs(),
			new LegsSlotChangeDeed(),
			new TrapLegs(),
			new DaminocLegs(),
			new CratylusLegs(),
			new ManiacTailorLegs(),
			new BoneLegs(),
			new DemonLordLegs(),
			new RoboLegs(),
			new DragonLegs(),
			new HydraLegs(),
			new DragonLegsOfEvolution(),
			new VirtueLegs(),
			new LegsOfTheLeprechaun(),
			new LoveLegs(),
			new MalabrancheLegs(),
			new MegamiLegs(),
			new DemonPactLegs(),
			new LegsofMight(),
			new LegsoftheUnderworld(),
			new LegsoftheSea(),
			new LegsMightCrystal(),
			new LegsoftheHeavens(),
			new TwistedLegs(),
			new OblivionLegs(),
			new SinLegs(),
			new AncientDragonLordLegs(),
			new SkeletalSerpentLegs(),
			new SuicideLegs(),
			new StuddedLegs(),
			new TergusLegs(),
			new VoidKnightLegs(),
			new GreymistLegs(),
			new TigerPeltLegs(),
			new AloronsLegs(),
			new AssassinLegs(),
			new BestialLegs(),
			new DaemonLegs(),
			new DragonTurtleHideLegs(),
			new DardensLegs(),
			new WoodlandLegs(),
			new DarkwoodLegs(),
			new HunterLegs(),
			new InitiationLegs(),
			new KnightsPlateLegs(),
			new LeafweaveLegs(),
			new MyrmidonLegs(),
			new DeathLegs(),
			new PaladinLegs(),
			new RangerLegs(),
			new ScoutLegs(),
			new SorcererLegs(),
			new HonorLegs(),
			new AnimatedLegsoftheInsaneTinker(),
			new GargishPlateLegs(),
			new RingmailLegs(),
			new RoyalZooLeatherLegs(),
			new RoyalZooPlateLegs(),
			new RoyalZooStuddedLegs(),
			new GargishStoneLegs(),
			new LegsOfStability(),
			new FemaleGargishLeatherLegs(),
			new FemaleGargishPlateLegs(),
			new FemaleGargishStoneLegs(),
			new GargishClothLegsArmor(),
			new FemaleGargishClothLegsArmor(),
			new GargishLeatherLegs(),
			new GargishClothLegs(),
			new FemaleGargishClothLegs(),
			new MaleGargishClothLegs(),
			new CoagulatedLegs(),
			new HangingChainmailLegs(),
			new LeatherBustierArms(),
			new TigerPeltBustier(),
			new AloronsBustier(),
			new DragonTurtleHideBustier(),
			new DardensBustier(),
			new StuddedBustierArms(),
			new ScoutBustier(),
			new BoneStuddedGorget(),
			new PlateGorget(),
			new GorgetOfMethodis(),
			new LeatherGorget(),
			new NoxGorget(),
			new RoyalGuardsGorget(),
			new TrapGorget(),
			new CratylusGorget(),
			new ManiacTailorGorget(),
			new RoboGorget(),
			new VirtueGorget(),
			new GorgetOfTheLeprechaun(),
			new OblivionGorget(),
			new SuicideGorget(),
			new StuddedGorget(),
			new TergusGorget(),
			new AloronsGorget(),
			new BestialGorget(),
			new WoodlandGorget(),
			new DarkwoodGorget(),
			new InitiationGorget(),
			new KnightsPlateGorget(),
			new MyrmidonGorget(),
			new PaladinGorget(),
			new RangerGorget(),
			new ScoutGorget(),
			new SorcererGorget(),
			new HonestyGorget(),
			new RoyalZooLeatherGorget(),
			new RoyalZooPlateGorget(),
			new RoyalZooStuddedGorget(),
			new HideGorget(),
			new LeafGorget(),
			new FetidPaladinsHelm(),
			new HelmoftheShadowKnight(),
			new DragonHelm(),
			new HelmetofMethodis(),
			new PlateHelm(),
			new NoxHelm(),
			new BoneHelm(),
			new NorseHelm(),
			new BlackKnightHelm(),
			new ArtifactHelm(),
			new DaminocHelm(),
			new ManiacTailorHelm(),
			new DemonLordHelm(),
			new RoboHelm(),
			new HydraHelm(),
			new DragonHelmOfEvolution(),
			new VirtueHelm(),
			new HelmOfTheLeprechaun(),
			new MalabrancheHelm(),
			new DemonPactHelm(),
			new HelmofMight(),
			new HelmoftheUnderworld(),
			new HelmoftheSea(),
			new HelmMightCrystal(),
			new HelmoftheHeavens(),
			new OrcHelm(),
			new TwistedHelm(),
			new SinHelm(),
			new AncientDragonLordHelm(),
			new SuicideHelm(),
			new VoidKnightsWarHelm(),
			new TigerPeltHelm(),
			new AloronsHelm(),
			new BestialHelm(),
			new DaemonHelm(),
			new DragonTurtleHideHelm(),
			new DardensHelm(),
			new RavenHelm(),
			new GrizzleHelm(),
			new CloseHelm(),
			new KnightsCloseHelm(),
			new KnightsNorseHelm(),
			new KnightsPlateHelm(),
			new DeathBoneHelm(),
			new PaladinHelm(),
			new SpiritualityHelm(),
			new HelmOfInsight(),
			new WingedHelm(),
			new HelmOfSwiftness(),
			new OrcChieftainHelm(),
			new RoyalZooPlateHelm(),
			new SamuraiHelm(),
			new DaimyosHelm(),
			new EvilOrcHelm(),
			new Helmet(),
			new VultureHelm(),
			new HelmOfVengence(),
			new NorseHelmBearingTheCrestOfBlackthorn3(),
			new PlateHelmBearingTheCrestOfBlackthorn3(),
			new NorseHelmBearingTheCrestOfBlackthorn2(),
			new PlateHelmBearingTheCrestOfBlackthorn2(),
			new NorseHelmBearingTheCrestOfBlackthorn1(),
			new PlateHelmBearingTheCrestOfBlackthorn1(),
			new Skirt(),
			new SkirtofArachnis(),
			new DASkirt(),
			new LeatherSkirt(),
			new LoveSkirt(),
			new RevelationSkirt(),
			new SSSkirt(),
			new SexiSkirt(),
			new TigerPeltLongSkirt(),
			new AloronsLongSkirt(),
			new TigerPeltSkirt(),
			new AloronsSkirt(),
			new SorcererSkirt(),
			new ZooMemberSkirt(),
			new LibraryFriendSkirt(),
			new TigerPeltShorts(),
			new AloronsShorts(),
			new ShortSpear(),
			new LeatherShorts(),
			new PlateChest(),
			new ChainChest(),
			new ChestOfMethodis(),
			new LeatherChest(),
			new MonsterChest(),
			new DarkGuardiansChest(),
			new StuddedChest(),
			new RoyalGuardsChestplate(),
			new KingsChest(),
			new AresChest(),
			new ChestSlotChangeDeed(),
			new MimicMusingsAChestsPerspective(),
			new AbandonedRefuseChest(),
			new StartingTreasureChest(),
			new TreasureChest(),
			new ArtifactChest(),
			new DaminocChest(),
			new CratylusChest(),
			new ManiacTailorChest(),
			new DAChest(),
			new BoneChest(),
			new DemonLordChest(),
			new RoboChest(),
			new DragonChest(),
			new HydraChest(),
			new DragonChestOfEvolution(),
			new KageMaruChest(),
			new VirtueChest(),
			new ChestOfTheLeprechaun(),
			new FLoveChest(),
			new LoveChest(),
			new MalabrancheChest(),
			new MegamiChest(),
			new DemonPactChest(),
			new ChestofMight(),
			new ChestoftheUnderworld(),
			new ChestoftheSea(),
			new ChestMightCrystal(),
			new ChestoftheHeavens(),
			new TwistedChest(),
			new OblivionChest(),
			new SinChest(),
			new AncientDragonLordChest(),
			new SexiChest(),
			new SkeletalSerpentChest(),
			new SuicideChest(),
			new TergusChest(),
			new VoidKnightChest(),
			new GreymistChest(),
			new TigerPeltChest(),
			new AssassinChest(),
			new DaemonChest(),
			new DragonTurtleHideChest(),
			new WoodlandChest(),
			new DarkwoodChest(),
			new LeafChest(),
			new HunterChest(),
			new InitiationChest(),
			new FemalePlateChest(),
			new KnightsFemalePlateChest(),
			new KnightsPlateChest(),
			new HideChest(),
			new LeafweaveChest(),
			new MyrmidonChest(),
			new DeathChest(),
			new PaladinChest(),
			new RangerChest(),
			new ScoutChest(),
			new FemaleStuddedChest(),
			new ScoutFemaleChest(),
			new SorcererChest(),
			new FemaleLeatherChest(),
			new SorcererFemaleChest(),
			new GargishClothChest(),
			new RoyalZooLeatherChest(),
			new RoyalZooLeatherFemaleChest(),
			new RoyalZooPlateChest(),
			new RoyalZooPlateFemaleChest(),
			new RoyalZooStuddedChest(),
			new RoyalZooStuddedFemaleChest(),
			new GargishPlateChest(),
			new ChestOfHeirlooms(),
			new FemaleGargishLeatherChest(),
			new FemaleGargishPlateChest(),
			new FemaleGargishStoneChest(),
			new FemaleLeafChest(),
			new FemaleElvenPlateChest(),
			new GargishClothChestArmor(),
			new FemaleGargishClothChestArmor(),
			new GargishLeatherChest(),
			new GargishStoneChest(),
			new HideFemaleChest(),
			new RingmailChest(),
			new FemaleGargishClothChest(),
			new MaleGargishClothChest(),
			new ChestOfSending(),
			new ChestOfDrawers(),
			new FootedChestOfDrawers(),
			new FishermansChestguard(),
			new MetalGoldenPuzzleChest(),
			new GargishPlatemailChestBearingTheCrestOfBlackthorn(),
			new GargishStoneChestBearingTheCrestOfBlackthorn(),
			new KhaldunChest(),
			new ExodusChest(),
			new SacrificeSollerets(),
			new SpiritualityHelm(),
			new ValorGauntlets(),
			new GargishPlateArms(),
			new VirtuososArmbands(),
			new JesterHat(),
			new VirtuososCap(),
			new VirtuososCollar(),
			new VirtuososEarpieces(),
			new VirtuososKidGloves(),
			new VirtuososKilt(),
			new VirtuososNecklace(),
			new VirtuososTunic(),
			new Aegis(),
			new AegisOfGrace(),
			new AnimatedLegsoftheInsaneTinker(),
			new ArcaneShield(),
			new ArmorOfFortune(),
			new ArmsOfArmstrong(),
			new BasiliskHideBreastplate(),
			new BouraTailShield(),
			new BrambleCoat(),
			new BritchesOfWarding(),
			new GargishPlateLegs(),
			new GargishBritchesOfWarding(),
			new BronzedArmorValkyrie(),
			new RingmailLegs(),
			new BulwarkLeggings(),
			new CandlewoodTorch(),
			new CastOffZombieSkin(),
			new CrownOfArcaneTemperament(),
			new CuffsOfTheArchmage(),
			new GargishStoneArms(),
			new GargishCuffsOfTheArchmage(),
			new DefenderOfTheMagus(),
			new GargishKiteShield(),
			new DragonHideShield(),
			new DupresShield(),
			new EscutcheonDeAriadne(),
			new FeyLeggings(),
			new GargishChaosShield(),
			new GargishSignOfChaos(),
			new GargishOrderShield(),
			new GargishSignOfOrder(),
			new GargishWoodenShield(),
			new GauntletsOfAnger(),
			new RingmailGloves(),
			new GauntletsOfNobility(),
			new GladiatorsCollar(),
			new GlovesOfFeudalGrip(),
			new GargishPlateKilt(),
			new GargishKiltOfFeudalVise(),
			new GargishKiltOfMining(),
			new GlovesOfSafeguarding(),
			new GlovesOfThePugilist(),
			new HealersTouch(),
			new HeartOfTheLion(),
			new HelmOfInsight(),
			new WingedHelm(),
			new HelmOfSwiftness(),
			new HolyKnightsBreastplate(),
			new HumanFeyLeggings(),
			new HumanSignOfChaos(),
			new HumanSignOfOrder(),
			new InquisitorsResolution(),
			new IronwoodCrown(),
			new JackalsCollar(),
			new KelpWovenLeggings(),
			new LeggingsOfBane(),
			new LeggingsOfEmbers(),
			new LightsRampart(),
			new LordBlackthornsExemplar(),
			new GargishClothChest(),
			new MantleOfTheFallen(),
			new MidnightBracers(),
			new MinaxsArmor(),
			new KeeoneansChainMail(),
			new VesperOrderShield(),
			new VesperChaosShield(),
			new MysticsGuard(),
			new OrcChieftainHelm(),
			new OrcishVisage(),
			new OrnateCrownOfTheHarrower(),
			new SamuraiHelm(),
			new SentinelsGuard(),
			new ShadowDancerLeggings(),
			new ShieldOfInvulnerability(),
			new ShroudOfDeceit(),
			new SongWovenMantle(),
			new SpellWovenBritches(),
			new GargishClothArms(),
			new SpinedBloodwormBracers(),
			new StitchersMittens(),
			new SummonersKilt(),
			new SurgeShield(),
			new TongueoftheBeast(),
			new TunicOfFire(),
			new TunicOfGuarding(),
			new TwilightJacket(),
			new ValkyrieArmor(),
			new VioletCourage(),
			new VoiceOfTheFallenKing(),
			new VoidInfusedKilt(),
			new WalkersLeggings(),
			new WallofHungryMouths(),
			new WardedDemonboneBracers(),
			new AcidProofRobe(),
			new ANecromancerShroud(),
			new AnniversaryRobe(),
			new PlainDress(),
			new AntiqueWeddingDress(),
			new BurglarsBandana(),
			new TricorneHat(),
			new CaptainJohnsHat(),
			new CloakOfDeath(),
			new CloakOfLife(),
			new CloakOfLight(),
			new GargishClothWingArmor(),
			new WingArmorOfLight(),
			new CloakOfPower(),
			new CloakOfSilence(),
			new ConjureresGarb(),
			new ConjureresGarbHarbringer(),
			new CrimsonCincture(),
			new GargoyleHalfApron(),
			new GargishCrimsonCincture(),
			new CrownOfTalKeesh(),
			new DetectiveBoots(),
			new HornedTribalMask(),
			new DivineCountenance(),
			new DreadPirateHat(),
			new EmbroideredOakLeafCloak(),
			new HatOfTheMagi(),
			new DeerMask(),
			new HuntersHeaddress(),
			new JadeArmband(),
			new LieutenantOfTheBritannianRoyalGuard(),
			new GargishSash(),
			new GargishLieutenantOfTheBritannianRoyalGuard(),
			new MagicalDoor(),
			new SavageMask(),
			new MarkOfTravesty(),
			new MysticsGarb(),
			new ObiDiEnse(),
			new PadsOfTheCuSidhe(),
			new PhilosophersHat(),
			new PolarBearMask(),
			new RangersCloakOfAugmentation(),
			new RobeOfTheEclipse(),
			new RobeOfTheEquinox(),
			new RoyalGuardInvestigatorsCloak(),
			new RunedSashOfWarding(),
			new GargishRunedSashOfWarding(),
			new SamaritanRobe(),
			new SashOfMight(),
			new ShadowCloakOfRejuvenation(),
			new GargishShadowCloakOfRejuvenation(),
			new ShroudOfTheCondemned(),
			new SolesOfProvidence(),
			new SpiritOfTheTotem(),
			new Tangle1(),
			new GargishTangle1(),
			new TheMostKnowledgePerson(),
			new TheRobeOfBritanniaAri(),
			new TheScholarsHalo(),
			new GargishLeatherWingArmor(),
			new WardensArmorOfAugmentation(),
			new ElvenGlasses(),
			new AnthropomorphistGlasses(),
			new ArtsGlasses(),
			new BrightsightLenses(),
			new GargishGlasses(),
			new GargishBrightsightLenses(),
			new MaceAndShieldGlasses(),
			new GargishMaceAndShieldGlasses(),
			new GlassesOfTheArts(),
			new GargishGlassesOfTheArts(),
			new TradesGlasses(),
			new GargishTradesGlasses(),
			new WizardsCrystalGlasses(),
			new GargishWizardsCrystalGlasses(),
			new TreasuresAndTrinketsGlasses(),
			new GargishTreasuresAndTrinketsGlasses(),
			new FoldedSteelGlasses(),
			new GargishFoldedSteelGlasses(),
			new LightOfWayGlasses(),
			new LyricalGlasses(),
			new MaritimeGlasses(),
			new NecromanticGlasses(),
			new NightEyes(),
			new PoisonedGlasses(),
			new TradeGlasses(),
			new TreasureTrinketGlasses(),
			new WizardsGlasses(),
			new DreadFlute(),
			new LapHarp(),
			new GwennosHarp(),
			new Lute(),
			new IolosLute(),
			new AlchemistsBauble(),
			new SilverNecklace(),
			new AmuletOfRighteousness(),
			new AnkhPendant(),
			new BarreraaksRing(),
			new BraceletOfHealth(),
			new BraceletOfPrimalConsumption(),
			new BraceletOfResilience(),
			new BurningAmber(),
			new SilverBracelet(),
			new ClaspOfConcentration(),
			new CrystallineRing(),
			new DemonBridleRing(),
			new DjinnisRing(),
			new DragonJadeEarrings(),
			new RedVelvetGiftBox(),
			new EarringBoxSet(),
			new EarringsOfProtection(),
			new EssenceOfBattle(),
			new Lavaliere(),
			new LuckyNecklace(),
			new VesperCollectionRing(),
			new VesperCollectionNecklace(),
			new VesperCollectionBracelet(),
			new VesperCollectionEarrings(),
			new NecklaceofDiligence(),
			new ObsidianEarrings(),
			new OrnamentOfTheMagician(),
			new PendantOfTheMagi(),
			new PetrifiedMatriarchsTongue(),
			new ReginasRing(),
			new ResilientBracer(),
			new RingOfTheElements(),
			new RingOfTheSavant(),
			new RingOfTheVile(),
			new TokenOfHolyFavor(),
			new TorcOfTheGuardians(),
			new Venom(),
			new ElvenQuiver(),
			new QuiverOfBlight(),
			new QuiverOfElements(),
			new QuiverOfFire(),
			new QuiverOfIce(),
			new QuiverOfInfinity(),
			new QuiverOfLightning(),
			new QuiverOfRage(),
			new ClaininsSpellbook(),
			new ConjurersGrimoire(),
			new FallenMysticsSpellbook(),
			new HallowedSpellbook(),
			new NecromancerSpellbook(),
			new OssianGrimoire(),
			new Runebook(),
			new ScrappersCompendium(),
			new Abhorrence(),
			new StoneWarSword(),
			new AbyssalBlade(),
			new Cyclone(),
			new AbyssReaver(),
			new ElvenMachete(),
			new AdventurersMachete(),
			new WildStaff(),
			new AncientWildStaff(),
			new ArcanistsWildStaff(),
			new WarMace(),
			new ArcticDeathDealer(),
			new MagicalShortbow(),
			new AssassinsShortbow(),
			new BattleAxe(),
			new AxeOfAbandon(),
			new AxeOfTheHeavens(),
			new DualShortAxes(),
			new AxesOfFury(),
			new BansheesCall(),
			new BarbedLongbow(),
			new RuneBlade(),
			new BladeDance(),
			new Shortblade(),
			new BladeOfBattle(),
			new BladeOfInsanity(),
			new BladeOfTheRighteous(),
			new BlazeOfDeath(),
			new BlightGrippedLongbow(),
			new BoneCrusher(),
			new DiamondMace(),
			new Bonesmasher(),
			new Boomstick(),
			new BowOfTheInfiniteSwarm(),
			new SoulGlaive(),
			new GlaiveOfTheInfiniteSwarm(),
			new BowOfTheJukaKing(),
			new BraveKnightOfTheBritannia(),
			new GargishPlateChest(),
			new BreastplateOfTheBerserker(),
			new BreathOfTheDead(),
			new WarCleaver(),
			new ButchersWarCleaver(),
			new Calm(),
			new CaptainJohnesBlade(),
			new GlassSword(),
			new GargishCaptainJohnesBlade(),
			new CaptainQuacklebushsCutlass(),
			new CavalrysFolly(),
			new CavortingClub(),
			new ChannelersDefender(),
			new AssassinSpike(),
			new ChargedAssassinSpike(),
			new ChurchillsWarMace(),
			new Tekagi(),
			new ClawsOfTheBerserker(),
			new Cleaver(),
			new ColdBlood(),
			new ElvenSpellblade(),
			new ColdForgedBlade(),
			new CorruptedRuneBlade(),
			new DualPointedSpear(),
			new Craven(),
			new DarkglowScimitar(),
			new DiscMace(),
			new DeathsHead(),
			new DemonHuntersStandard(),
			new DiseasedMachete(),
			new DraconisWrath(),
			new DragonsEnd(),
			new DreadsRevenge(),
			new QuarterStaff(),
			new EmberStaff(),
			new ShortSpear(),
			new EnchantedTitanLegBone(),
			new GnarledStaff(),
			new Equivocation(),
			new GargishGnarledStaff(),
			new GargishEquivocation(),
			new EternalGuardianStaff(),
			new FaerieFire(),
			new FangOfRactus(),
			new FierySpellblade(),
			new FleshRipper(),
			new FNPitchfork(),
			new Frostbringer(),
			new FrozenLongbow(),
			new GargishStoneLegs(),
			new GiantSteps(),
			new GlacialStaff(),
			new Glenda(),
			new OrnateAxe(),
			new GuardianAxe(),
			new HardenedWildStaff(),
			new Heartseeker(),
			new HolySword(),
			new IcyScimitar(),
			new IcySpellblade(),
			new InfusedGlassStave(),
			new IronwoodCompositeBow(),
			new JaanasStaff(),
			new WarAxe(),
			new JadeWarAxe(),
			new JocklesQuicksword(),
			new ShepherdsCrook(),
			new KatrinasCrook(),
			new KnightsWarCleaver(),
			new Leafblade(),
			new LeafbladeOfEase(),
			new DreadSword(),
			new LegacyOfDespair(),
			new LegacyOfTheDreadLord(),
			new BloodBlade(),
			new LifeSyphon(),
			new GargishTalwar(),
			new LightInTheVoid(),
			new LongbowOfMight(),
			new Luckblade(),
			new LuminousRuneBlade(),
			new Lance(),
			new LunaLance(),
			new MacheteOfDefense(),
			new MagekillerAssassinSpike(),
			new MagekillerLeafblade(),
			new MagesRuneBlade(),
			new Mangler(),
			new MelisandesCorrodedHatchet(),
			new MischiefMaker(),
			new BlackthornsKryss(),
			new SwordOfJustice(),
			new ExecutionersAxe(),
			new GeoffreysAxe(),
			new MysticalShortbow(),
			new NightsKiss(),
			new NoxRangersHeavyCrossbow(),
			new OblivionsNeedle(),
			new OrcishMachete(),
			new OverseerSunderedBlade(),
			new Pike(),
			new Pacify(),
			new SerpentStoneStaff(),
			new PetrifiedSnake(),
			new PhantomStaff(),
			new Pincer(),
			new GargishBattleAxe(),
			new GargishPincer(),
			new PixieSwatter(),
			new Quell(),
			new RaedsGlory(),
			new RangersShortbow(),
			new Boomerang(),
			new RaptorClaw(),
			new RecarosRiposte(),
			new ResonantStaffofEnlightenment(),
			new RighteousAnger(),
			new RoyalGuardSurvivalKnife(),
			new RuneBladeOfKnowledge(),
			new RuneCarvingKnife(),
			new RunedDriftwoodBow(),
			new Runesabre(),
			new SapphireMace(),
			new ScepterOfTheChief(),
			new SerpentsFang(),
			new RepeatingCrossbow(),
			new ShaminoCrossbow(),
			new ShardThrasher(),
			new SilvanisFeywoodBow(),
			new SilverSerpentBlade(),
			new SingingAxe(),
			new SlayerLongbow(),
			new SoulSeeker(),
			new SpellbladeOfDefense(),
			new StaffOfPower(),
			new GlassStaff(),
			new StaffOfResonance(),
			new StaffOfShatteredDreams(),
			new StaffOfTheMagi(),
			new StandardOfChaos(),
			new StandardOfChaosG(),
			new GargishDagger(),
			new StoneDragonsTooth(),
			new StoneSlithClaw(),
			new StormCaller(),
			new Subdue(),
			new SwordOfShatteredHopes(),
			new TalonBite(),
			new TheBeserkersMaul(),
			new TwoHandedAxe(),
			new TheDeceiver(),
			new TheDragonSlayer(),
			new NoDachi(),
			new TheDragonsTail(),
			new TheDryadBow(),
			new HammerPick(),
			new TheImpalersPick(),
			new TheNightReaper(),
			new TheTaskmaster(),
			new ThornedWildStaff(),
			new ThunderingAxe(),
			new TitansHammer(),
			new TrueAssassinSpike(),
			new TrueLeafblade(),
			new TrueRadiantScimitar(),
			new TrueSpellblade(),
			new TrueWarCleaver(),
			new TwinklingScimitar(),
			new ValkyriesGlaive(),
			new VampiricEssence(),
			new WildfireBow(),
			new WindOfCorruption(),
			new WindOfCorruptionHuman(),
			new Windsong(),
			new WoundingAssassinSpike(),
			new WrathOfTheDryad(),
			new ZyronicClaw(),
			new ConjurersTrinket(),
			new FrostguardTalisman(),
			new JadeSnakeHead(),
			new TinkerTools(),
			new AmeliasToolbox(),
			new JacobsPickaxe(),
			new XenrrFishingPole(),
			new CompassionsEye(),
			new UnicornManeWovenSandals(),
			new LeatherTalons(),
			new UnicornManeWovenTalons(),
			new DespicableQuiver(),
			new UnforgivenVeil(),
			new HailstormHuman(),
			new GargishWarFork(),
			new HailstormGargoyle(),
			new Kama(),
			new DarkenedSky(),
			new Kasa(),
			new KasaOfTheRajin(),
			new PlateDo(),
			new RuneBeetleCarapace(),
			new Stormgrip(),
			new SwordOfTheStampede(),
			new SwordsOfProsperity(),
			new Yumi(),
			new TheHorselord(),
			new TomeOfLostKnowledge(),
			new Tessen(),
			new WindsEdge(),
			new AncientFarmersKasa(),
			new AncientSamuraiDo(),
			new LeatherHiroSode(),
			new ArmsOfTacticalExcellence(),
			new ClothNinjaHood(),
			new BlackLotusHood(),
			new PlateBattleKabuto(),
			new DaimyosHelm(),
			new Sai(),
			new DemonForks(),
			new Nunchaku(),
			new DragonNunchaku(),
			new Tetsubo(),
			new Exiler(),
			new GlovesOfTheSun(),
			new HanzosBow(),
			new PlateSuneate(),
			new LegsOfStability(),
			new PeasantsBokuto(),
			new PilferedDancerFans(),
			new TheDestroyer(),
			new TomeOfEnlightenment(),
			new LeurociansMempoOfFortune(),
			new AncientUrn(),
			new HonorableSwords(),
			new ChestOfHeirlooms(),
			new BambooFlute(),
			new FluteOfRenewal(),
			new LesserPigmentsOfTokuno(),
			new MetalPigmentsOfTokuno(),
			new AresCloak(),
			new CloakOfCommand(),
			new CloakofArachnis(),
			new ChaosCloak(),
			new AtlantisCloak(),
			new VirtueCloak(),
			new RevelationCloak(),
			new HumilityCloak(),
			new CloakOfDeath(),
			new CloakOfLife(),
			new CloakOfLight(),
			new CloakOfPower(),
			new CloakOfSilence(),
			new EmbroideredOakLeafCloak(),
			new RangersCloakOfAugmentation(),
			new RoyalGuardInvestigatorsCloak(),
			new ShadowCloakOfRejuvenation(),
			new GargishShadowCloakOfRejuvenation(),
			new RewardCloak(),
			new ZooMemberCloak(),
			new LibraryFriendCloak(),
			new BaronLenshiresCloak(),
			new CloakBearingTheCrestOfBlackthorn(),
			new StaffCloak(),
        };

        private List<Item> currentRandomItems = new List<Item>();
        private int[] currentRandomPrices = new int[9];

        public TreasureGamblerGump(Mobile from) : base(0, 0)
        {
            m_From = from;

            RandomizeItemsAndPrices();

            this.Closable = true;
            this.Disposable = true;
            this.Dragable = true;
            this.Resizable = false;

            AddPage(0);
            // Adjust the background size to accommodate increased spacing between items

            AddImageTiled(10, 10, 400, 200, 2624);
            AddImageTiled(10, 40, 400, 200, 2624);
            AddImageTiled(10, 50, 400, 200, 2624);
            AddImageTiled(10, 60, 400, 200, 2624);
            AddImageTiled(10, 70, 400, 200, 2624);
            AddImageTiled(10, 80, 400, 200, 2624);
            AddImageTiled(10, 100, 400, 200, 2624);
            AddImageTiled(10, 130, 400, 200, 2624);
            AddImageTiled(10, 150, 400, 200, 2624);
            AddImageTiled(10, 250, 400, 200, 2624);
            AddImageTiled(10, 450, 400, 200, 2624);

            AddImageTiled(40, 10, 400, 200, 2624);
            AddImageTiled(40, 40, 400, 200, 2624);
            AddImageTiled(40, 50, 400, 200, 2624);
            AddImageTiled(40, 60, 400, 200, 2624);
            AddImageTiled(40, 70, 400, 200, 2624);
            AddImageTiled(40, 80, 400, 200, 2624);
            AddImageTiled(40, 100, 400, 200, 2624);
            AddImageTiled(40, 130, 400, 200, 2624);
            AddImageTiled(40, 150, 400, 200, 2624);
            AddImageTiled(40, 250, 400, 200, 2624);
            AddImageTiled(40, 450, 400, 200, 2624);

            AddImageTiled(80, 10, 400, 200, 2624);
            AddImageTiled(80, 40, 400, 200, 2624);
            AddImageTiled(80, 50, 400, 200, 2624);
            AddImageTiled(80, 60, 400, 200, 2624);
            AddImageTiled(80, 70, 400, 200, 2624);
            AddImageTiled(80, 80, 400, 200, 2624);
            AddImageTiled(80, 100, 400, 200, 2624);
            AddImageTiled(80, 130, 400, 200, 2624);
            AddImageTiled(80, 150, 400, 200, 2624);
            AddImageTiled(80, 250, 400, 200, 2624);
            AddImageTiled(80, 450, 400, 200, 2624);

            AddImageTiled(200, 10, 400, 200, 2624);
            AddImageTiled(200, 40, 400, 200, 2624);
            AddImageTiled(200, 50, 400, 200, 2624);
            AddImageTiled(200, 60, 400, 200, 2624);
            AddImageTiled(200, 70, 400, 200, 2624);
            AddImageTiled(200, 80, 400, 200, 2624);
            AddImageTiled(200, 100, 400, 200, 2624);
            AddImageTiled(200, 130, 400, 200, 2624);
            AddImageTiled(200, 150, 400, 200, 2624);
            AddImageTiled(200, 250, 400, 200, 2624);
            AddImageTiled(200, 450, 400, 200, 2624);

            AddImageTiled(250, 10, 400, 200, 2624);
            AddImageTiled(250, 40, 400, 200, 2624);
            AddImageTiled(250, 50, 400, 200, 2624);
            AddImageTiled(250, 60, 400, 200, 2624);
            AddImageTiled(250, 70, 400, 200, 2624);
            AddImageTiled(250, 80, 400, 200, 2624);
            AddImageTiled(250, 100, 400, 200, 2624);
            AddImageTiled(250, 130, 400, 200, 2624);
            AddImageTiled(250, 150, 400, 200, 2624);
            AddImageTiled(250, 250, 400, 200, 2624);
            AddImageTiled(250, 450, 400, 200, 2624);

            AddImageTiled(290, 10, 400, 200, 2624);
            AddImageTiled(290, 40, 400, 200, 2624);
            AddImageTiled(290, 50, 400, 200, 2624);
            AddImageTiled(290, 60, 400, 200, 2624);
            AddImageTiled(290, 70, 400, 200, 2624);
            AddImageTiled(290, 80, 400, 200, 2624);
            AddImageTiled(290, 100, 400, 200, 2624);
            AddImageTiled(290, 130, 400, 200, 2624);
            AddImageTiled(290, 150, 400, 200, 2624);
            AddImageTiled(290, 250, 400, 200, 2624);
            AddImageTiled(290, 450, 400, 200, 2624);

            AddLabel(75, 25, 1152, "Special Vendor Offers");

            // Adjusted loop for increased spacing
            for (int i = 0; i < currentRandomItems.Count; i++)
            {
                // Adjust the positions for better spacing
                int x = 75 + (i % 3) * 200; // Increased spacing on X-axis
                int y = 75 + (i / 3) * 150; // Increased spacing on Y-axis

                AddLabel(x, y, 1153, currentRandomItems[i].Name);
                AddLabel(x, y + 30, 1153, "Price: " + currentRandomPrices[i].ToString() + "gp");
                // Adjust the button and item positions based on new spacing
                AddButton(x + 130, y + 20, 4023, 4023, i + 1, GumpButtonType.Reply, 0); // Buy button for each item
                AddItem(x + 60, y + 60, currentRandomItems[i].ItemID); // Adjust for visual clarity
            }

            // Adjust the reroll button position based on the new layout
            AddButton(550, 550, 4020, 4020, 10, GumpButtonType.Reply, 0); // Reroll button
        }

        private void RandomizeItemsAndPrices()
        {
            Random rand = new Random();
            currentRandomItems.Clear();

            while (currentRandomItems.Count < 9)
            {
                Item potentialItem = itemsList[rand.Next(itemsList.Count)];
                if (!currentRandomItems.Contains(potentialItem))
                {
                    currentRandomItems.Add(potentialItem);
                    currentRandomPrices[currentRandomItems.Count - 1] = rand.Next(500, 40000); // Random price for each item
                }
            }
        }

        public override void OnResponse(NetState sender, RelayInfo info)
        {
            Mobile from = sender.Mobile;

            if (info.ButtonID >= 1 && info.ButtonID <= 9)
            {
                int itemIndex = info.ButtonID - 1;
                int price = currentRandomPrices[itemIndex];

                if (from.Backpack.ConsumeTotal(typeof(Gold), price))
                {
                    Item item = (Item)Activator.CreateInstance(currentRandomItems[itemIndex].GetType());
                    from.Backpack.DropItem(item);
                    from.SendMessage("You have bought a " + currentRandomItems[itemIndex].Name + ".");
                }
                else
                {
                    int totalGold = from.Backpack.GetAmount(typeof(Gold)) + Banker.GetBalance(from);

                    if (totalGold >= price)
                    {
                        int backpackGold = from.Backpack.GetAmount(typeof(Gold));
                        int bankGold = price - backpackGold;

                        if (backpackGold > 0)
                        {
                            from.Backpack.ConsumeTotal(typeof(Gold), backpackGold);
                        }

                        if (bankGold > 0)
                        {
                            Banker.Withdraw(from, bankGold);
                        }

                        Item item = (Item)Activator.CreateInstance(currentRandomItems[itemIndex].GetType());
                        from.Backpack.DropItem(item);
                        from.SendMessage("You have bought a " + currentRandomItems[itemIndex].Name + ".");
                    }
                    else
                    {
                        from.SendMessage("You do not have enough gold.");
                    }
                }
            }
            else if (info.ButtonID == 10) // Reroll button
            {
                int rerollCost = 5000;

                if (from.Backpack.ConsumeTotal(typeof(Gold), rerollCost))
                {
                    RandomizeItemsAndPrices();
                    from.SendGump(new TreasureGamblerGump(from));
                    from.SendMessage("The items have been rerolled.");
                }
                else
                {
                    int totalGold = from.Backpack.GetAmount(typeof(Gold)) + Banker.GetBalance(from);

                    if (totalGold >= rerollCost)
                    {
                        int backpackGold = from.Backpack.GetAmount(typeof(Gold));
                        int bankGold = rerollCost - backpackGold;

                        if (backpackGold > 0)
                        {
                            from.Backpack.ConsumeTotal(typeof(Gold), backpackGold);
                        }

                        if (bankGold > 0)
                        {
                            Banker.Withdraw(from, bankGold);
                        }

                        RandomizeItemsAndPrices();
                        from.SendGump(new TreasureGamblerGump(from));
                        from.SendMessage("The items have been rerolled.");
                    }
                    else
                    {
                        from.SendMessage("You do not have 5000 gold to reroll.");
                    }
                }
            }
        }
    }
}
